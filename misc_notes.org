These are random notes and ideas. This is not project documentation.
These notes do not refect the current state of the project.

* type declarations
x = [str]
** proposed type declaration grammar
#+Begin_SRC text
TYPE_DECL -> x = TYPE
TYPE -> T | [ T ]
 T -> int | str | float | func |
#+END_SRC
** other possible type declaration syntax:
#+Begin_SRC text
  x <= [str]
  x <- [str]
  x = [str]
  "x : [str]"
  x.type = [str]
  [str](x)
#+END_SRC
* arduino vm
** variable lookup
#+Begin_SRC text
global variables are stored in a global array
functions have their own array for local vars

the variable name mapping is not stored on the
Arduino, only the indexes are send with the byte codes.
The name->index mapping is stored in the compiler environment.
#+END_SRC
** programming model
#+Begin_SRC text
stack based
with registers
codeblocks
?
#+END_SRC
* setting up the Arduino board
** hardware
*** connecting the rx pin to an interrupt pin
TODO

* questions/problems

** how to send code over serial to arduino?
#+Begin_SRC text
 is there an interrupt for the serial?
 polling?
  how? insert bytecodes that check if serial is available
    problem: impossible to check on consistent interval
             loops may check more often


solution: ==> use separate interrupt

how sending data to arduino over serial works:
  when data is sent to the arduino over serial it triggers an interrupt
  that will read that data into an internal buffer. the method
  Serial.available() checks if data is in that buffer.

we will attach a separate interrupt function to the rx pin (used by the serial)
when data is sent it will also trigger this function, which will wait
for the data to be fully read into the arduino, then it send it to the vm
 ?will it store it all first, or send it incrementally?
   ==>incrementally
#+END_SRC

** how to store the bytecode internally?

bytecodes are kept in arrays that are stored in a linked list - blockchain

** should code blocks and function be automatically sent when defined?

==>no

* codeblocks
#+Begin_SRC text
 codeblocks are blocks of bytecode created in python and injected
 into the arduino main loop. By default they are appended but can
 also be inserted in any order. codeblocks can be moved or deleted.
 The mainloop will repeatedly execute the codeblock in order.
#+END_SRC
** limitations

All syntactic structures must be contained entirely in a single codeblock

** changing codeblocks

Codeblock code can be changed but it will cause the entire block to be
recompiled and resent to the Arduino.

** why codeblocks?

codeblocks provide an easy way to selectively, enable, disable, and move
sections of code. sections of code can be changed without having to retransmit
everything. They allow us to avoid having to resize arrays or shift bytecodes.

* compiler environment
arduino vm state is partially duplicated in python in order
to incrementally generate fast bytecode.

mapping variable names to array indexes
* possible points of confusion
#+Begin_SRC text
syntax is a subset of python but the semantics are different
  => to make things easier, we have clear error messages for
     unsupported syntax, but users will still have to learn the
     semantics. Semantics are as close to C.
#+END_SRC
** defining codeblocks

defining a codeblock:
   @block
   def name():
     ...

does not create a function even though function syntax is used

=> Why use function syntax then?
   because we need a way of picking out the code to be compiled to bytecode from
   the ast, the decorator provides an easy way to find it.

* challenging parts
TODO

* order of implementation
#+Begin_SRC text
- simple vm + compiler running on desktop
  can execute x = 1 + 3; print(x)
  - ast
  - compiler
  - codeblocks
- add serial communication, run on Arduino
- then add more vm features:
  - more bin-ops
  - if conditions
  - while loops
  - functions
  - strings
  - arrays
  - structs
 ...
more robust serial object (automatic connection, reconnection)
calling native functions
writing c primitives
adding/inserting/removing code blocks from mainloop
#+END_SRC
* syntax
#+Begin_SRC text
# define a codeblock
@block
def name():
  pin(19, ON)
  delay(1)

# define an arduino function
@function
def block():
  serial_write('hi')

# send a codeblock
arduino.send(name)
# insert, disable, delete codeblock
arduino.insert(name, 1)
arduino.disable(name)
arduino.delete(name)
# move a codeblock
arduino.move(name,2)
# if a codeblock already exists in the mainloop, arduino.insert will move it
# ==> Or should it duplicate it?

#+END_SRC
* interactivity
#+Begin_SRC text
the problem:
  the source code is needed to get the AST so just having a normal
  REPL does not work(only the bytecode is available at this stage)

possible solution:
 have the decorators retrieve previously compiled bytecode
 functions/codeblocks are compiled before hand and saved in a global dict.
 non-interactively:
   before python file is evaluated, extract relevant ASTs and generate
   bytecode from them, place it in a file that is imported by the main maml file
   =>OR have maml.py read the file and generate bytecodes - don't save to file
 interactively:
   before new code is sent, ASTs are extracted from whole file and
   bytecodes are updated, only send if ast ast has changed

 for getting and setting variable:
   this can be done interactively via the Arduino.get and Arduino.set methods.
#+END_SRC
* creating standalone arduino applications (no PC communication)
#+Begin_SRC text
This is done in the same way as an application that has PC communication
except at the end of the program there is no kind event loop, after
the code is sent to the Arduino it can be removed from the usb.
When creating such applications using a single codeblock should
be preferred.

#TODO: If we tell the vm that no more code will be sent, maybe it can
       free up some extra space
#+END_SRC
* serial protocol
* adding new features
** new AST nodes
** new bytecodes
** new vm cases
* todo
- Automatically find the pid of the avm process
- Automatically find the Arduino serial port
* how to handle injecting code?
#+Begin_SRC text
if we interrupt the process too run it we may mess up the internal state
leading to super nasty bugs.
possible solutions:
The interrupt can stash the code somewhere and the vm will eval it at
 its next opportunity - problem: now we constantly have to check for
 available code to run, that sucks.
 => maybe insert a special bytecode every 100 bytecodes and have the loop
    check every iteration for available code.
    (this can be disabled for applications that will not use this features)
    Problem: calling primitives that take a long time to return
OR: save all the critical variables and restore them after injected code finishes
OR: specify when to run the injected code (after block or loop iter, etc)
OR: temporally redefine the bytecode array so that the next instruction
    jump will run the injected code. YES! THIS ONE
    problem: this will not work if operands are dispersed in the bytecode
             ->separate opcodes from operands?
             -> temp variable 'next' that is set to the jump label
                before anything else. -> But what if we are interrupted
                mid assignment? at what points can we be interrupted?
      maybe just best to save all vm state and restore it, works for
      normal interrupts



when injecting code need to make sure the current instruction has finished
  => redefined where the interpreter jumps to next
 signal interrupt for desktop version to read in code
  => use lock file to prevent untimely interruptions
  OR: if interrupted when reading in, set a flag. at the end of
      bytecode readin if the flag is set then call the serial_in function
      again. repeat until flag is left false.
      PROBLEM: The python program will not know if the vm has read in the
               current file and may change them so rapidly that the vm
               will miss them. then sadness and broken invariants.
#+END_SRC
* calling functions
#+Begin_SRC text
function is on top of stack, it's arguments are below
 -> primatives are different, args are on stack, func is next in bytecode

separate primitives from user-defined functions
  for primitive functions, the function pointer is next in bytecode
    => need to have some way of registering primitive functions so that the
    bytecode conversion knows now to convert the function reference
    - have some kind of int -> function mapping

  TODO: user defined functions
#+END_SRC

** defining primitive functions

#+Begin_SRC text
 python name to number mapping

 bytecode:
  SOP_PRIMATIVE primative_number

 translation:
  case SOP_PRIMATIVE_FN:
   code_array[i] = _primitives[primitive_number]


 primitive function syntax (in primitives.c)
 _PRIMITIVE_
 type name(type arg1, type arg2){ ... }


 pre-processor creates two files from the primitives.c file:
   _prim.c
     // void** _primitives declared outside main
     _primitives = malloc(sizeof(void*)*<LEN>);
     _primitives[0] = &primative1
     _primitives[1] = &primative2
     ...

  _prim.py
   primitives = {}
   primitives["primitive1"] = 0
   primitives["primitive2"] = 1

#+END_SRC
* compiling bytecode with the vm:
#+Begin_SRC text
we could have the vm send back the threaded code, then compile that
into vm
=> this will take more room. If the program is large it may make more
   sense to store the bytecodes and convert to threaded code at start up
   => we may have to do this anyways, how else will we know how to
      create the codeblock, strings, functions?

compiling the bytecode is necessary for utilizing memory will for another reason:
  We have to include all the standard primitive function definitions
  just in case one is used. By compiling, we can eliminate all references
  to them.


can we just dump the whole vm image like emacs does?
#+END_SRC
* local vs global variable lookup
#+Begin_SRC text
 option 1: have the lookup function check that we are executing a lambda,
           if not found locally, check for global value
 option 2: have a separate opcode for variable lookups in functions.
           it can fallthrough to the global lookup. YES

local vs global variable setting
  separate opcode for setting a variable in a function
  if the variable is declared global, then the regular opcode is used

#+END_SRC
* Calling functions stored in variables
#+Begin_SRC text
  if all functions have one type how do we know
    if it is built-in or user defined?
   => introduce limitation:
        primative functions are not first class - they must be called by name
#+END_SRC
* 'if' conditions
#+Begin_SRC text
<condition> OP_IF false_label <true code> <false code>

how do we know where the <false code> starts?
 the bytecode array that we send changes size after internal conversation
 so its hard to pre-calculate
 => use tokens in place of the address, store address of spot in code
   after OP_IF with token in separate array. have seporate SOP code at the
    start of the <false code> that will lookup its token in that array
    and insert its address after the corresponding OP_IF
   translation runtime is proportional to the number of nested ifs
   -> we need to do the same thing to jump over the false code if
      the condition is true
  'if' without 'else'?
      same thing, there is just no <false code>
  

OP_IF (jmp false_label) <true code> (jmp done) [false] <false code> [done]
#+END_SRC
* jumps
#+Begin_SRC text
 
OP_JMP
SOP_LABEL

when generating bytecode each label is assigned an index number.
when translating, every time a label is found its address is 
saved in an array at that index.
All jump are also saved in an array in the format:
  <jmp address 1>, label_index, <jmp address 2>, label_index,...

when all the bytecode for a block is read in, iterate through the
jump array and set the corresponding addresses in the code array.


instead of resizing arrays, could transit the needed array size and
allocate once in the beginning.


can only jump to labels in the same block/function

#+END_SRC

* interrupts
#+Begin_SRC text
 oops..can't attach ISRs to all pins and have them call designated 
 interrupt variables as suggested at the end of the presentation. Instead:
 
 attaching primitives can be done in the same way was they are
 manipulated in the program as a function pointer. 

 user defined functions are a bit harder.
  predefine functions _isr_1,_isr_n,...,_isr_n
  that call variables _isr_fn_1, _isr_fn_2,_isr_fn_n
  
  to define an isr:   => actually no need to have seporate decorator. use @function
   @interrupt
   def name():
      ...
  
  desugar:
    attachInterrupt(0, name, CHANGE)
  into:
    attachInterrupt(0, _isr_fn_i, CHANGE)
    _isr_v_i = name
#+END_SRC
* static type analysis

#+Begin_SRC text
primitive values (int, str, etc) declare their own types?

traverse ast tree bottom up.
define type analysis functions with decorators in the same way as
 we did the @node and @check
 -> @type_check
 each one recursively checks its children and then checks itself


x <- int
x = car(lst)

how to declare 'car' as accepting type [X] and returning X?
 
[[(int)]]

seporate class for types?


format for function types?
 a1,a2,...,an:ret

declaring primitive types?

def f(a:int, b:X, c:list)-> [X]:
def car(list:[X])->X:

cast(car(list), int)

'any' type equivalent to NULL or Object

?
from a function type annotations create a transformation function
that takes the arguments in a call to that function and returns the
type of the call expression

def car(list:[X])->X:
   ...
=> 

func def:
  parameters [([X])], (Y), ([Z])
  returns [(x), [Y]]
internal rep
 parameters: [ [ '[','(','[', 'X' ]
               [ '(', 'Y']        ]
               [ '(','[', 'Z'     ] ]
 

constructing type objects from type strings or ASTs:
match first character:
  [,( -> trim first+last char, create list/tuple object
         and pass the remainder to it for recursive construction
  anything else  -> type name

to check the types when calling a function:
 pair up the type objects and traverse them, checking for equality,
 when a variable type is found (like X), save its value in some
 dictionary. To construct the output type, lookup the variables in that dict
 

  while constructing, if any type is unknown (like X), then 
 

class type_list:
class type_tuple:

OK FINE WE DON'T HAVE TIME FOR THIS 

#+END_SRC
* specific function translation
#+Begin_SRC text
@function_code_gen('fname')
def _(ast):
    #type/function specific translation of 'fname'
#+END_SRC
* break and continue
#+Begin_SRC text
while a
  while b
     while c
      ...
  break
    while x
       ..
  x()

in maml_env.py have two stack for the current while loop start/end labels
'break' or 'continue' look up these labels to know where to jump to 

#+END_SRC
