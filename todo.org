* Language features
- [X] Break and continue for while loops
- [ ] For loops (mark unimplemented?)
- [ ] Chain together multiple blocks or send multiple blocks at once
- [X] Unary opCode
- [X] Most conditionals
- [X] Arithmetic expressions (a*b, a/b, a-b, a+b)
- [X] >, >=, <=, ==
- [X] Augmented assignment
- [X] Chained assignment (e.g. a = b = 2)
- [ ] Chained comparison (ex: 1 < 2 <= 3) 
- [ ] standard functions for working with arrays/lists + print etc
      the compiler should use the available types to output correct function

* Compilation
- [ ] Check that reserved variable names, keyword, and function are not used incorrectly
- [ ] Any expression that can be at the top level that normally
      pushes to the stack will have to pop that element from the stack
- [X] Declaration of built-in variable types
- [ ] Need way of declaring types of built in functions
- [ ] assignment to list/vertex indices etc
      currently only supports assignment to variables
- [ ] decorator used for defining the translation of specific functions
- [ ] static typing should not be optional - only auto type declarations
- [ ] allow_type_reassign should be set to False by default
      currently to to True because tests fail otherwise
- [ ] check types of comparisons like '>' in @type_check('compare')
* VM
- [ ] Need some way of growing the stack -> have a function or opcode to do that
- [ ] Separate function that wraps malloc and check if mem is available
- [ ] Optional array bounds checking for arrays and lists
- [ ] Attach all kill signals to function that removes the lock file
- [ ] Find someway of using an array for label addresses instead
      (so that we can dynamically allocate the memory and free it if needed)

* AST
Better way of transforming the ast - dont convert to dictionaries in that
traverse the ast object without converting to string and evaluating

* Primitive functions
- [ ] Primitive reprocessing needs to get arg count + type
- [ ] Check argument count when calling primitives

* Bugs
- [X] null terminators in middle of strings
      this is an error:
        x = "test \0string"
      because the vm stops reading when it reaches \0
      and the rest of the characters are interpreted as opcodes
- [ ] bug: in @code_gen('assign'), the assigned value should only be evaluated once

* Miscellaneous
- [ ] Functions for reporting errors (instead of using print + exit everytime)
- [X] need test framework for testing invalid programs
      current version does not work because it only diffs with the
      VM output.
- [ ] configuration file compilation + vm features
      static type configs
      debugging vars
      features to include in the compiled vm
