* Langauge features
- [ ] Chain together multiple blocks or send multiple blocks at once
- [X] Unary opCode
- [X] Most conditionals
- [ ] For loops (mark unimplemented?)
- [X] Arithmetic expressions (a*b, a/b, a-b, a+b)
- [X] >, >=, <=, ==
- [X] Augmented assignment
- [ ] Chained comparison (ex: 1 < 2 <= 3) __lower priority__
- [ ] Break and continue for while loops
- [X] Chained assignment (e.g. a = b = 2)

* Compilation
- [ ] Check that reserved variable names, keyword, and function are not used incorrectly
- [ ] Any expression that can be at the top level that normally
      pushes to the stack will have to pop that element from the stack
- [ ] Declaration of built-in variable types
- [ ] Need way of declaring types of built in functions

* VM
- [ ] Need some way of growing the stack -> have a function or opcode to do that
- [ ] Separate function that wraps malloc and check if mem is available
- [ ] Optional array bounds checking for arrays and lists
- [ ] Attach all kill signals to function that removes the lock file
- [ ] Find someway of using an array for label addresses instead
      (so that we can dynamically allocate the memory and free it if needed)

* AST
Better way of transforming the ast - dont convert to dictionaries in that
traverse the ast object without converting to string and evaluating

* Primitive functions
- [ ] Primitive reprocessing needs to get arg count + type
- [ ] Check argument count when calling primitives

* Bugs
- [X] null terminators in middle of strings
this is an error:
  x = "test \0string"
because the vm stops reading when it reaches \0
and the rest of the characters are interpreted as opcodes

* Miscellaneous
- [ ] Function for reporting errors (instead of using print + exit everytime )

Fix: check for terminators in strings and only send first part
